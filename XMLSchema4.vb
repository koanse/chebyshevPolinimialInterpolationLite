'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class XMLSchema4
    Inherits DataSet
    
    Private tableОстаточные_дисперсии As Остаточные_дисперсииDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Остаточные дисперсии")) Is Nothing) Then
                Me.Tables.Add(New Остаточные_дисперсииDataTable(ds.Tables("Остаточные дисперсии")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Остаточные_дисперсии As Остаточные_дисперсииDataTable
        Get
            Return Me.tableОстаточные_дисперсии
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As XMLSchema4 = CType(MyBase.Clone,XMLSchema4)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Остаточные дисперсии")) Is Nothing) Then
            Me.Tables.Add(New Остаточные_дисперсииDataTable(ds.Tables("Остаточные дисперсии")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableОстаточные_дисперсии = CType(Me.Tables("Остаточные дисперсии"),Остаточные_дисперсииDataTable)
        If (Not (Me.tableОстаточные_дисперсии) Is Nothing) Then
            Me.tableОстаточные_дисперсии.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "XMLSchema4"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/XMLSchema4.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableОстаточные_дисперсии = New Остаточные_дисперсииDataTable
        Me.Tables.Add(Me.tableОстаточные_дисперсии)
    End Sub
    
    Private Function ShouldSerializeОстаточные_дисперсии() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Остаточные_дисперсииRowChangeEventHandler(ByVal sender As Object, ByVal e As Остаточные_дисперсииRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Остаточные_дисперсииDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Степень_интерполяцион__мн_ As DataColumn
        
        Private columnОстаточная_дисперсия As DataColumn
        
        Friend Sub New()
            MyBase.New("Остаточные дисперсии")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _Степень_интерполяцион__мн_Column As DataColumn
            Get
                Return Me.column_Степень_интерполяцион__мн_
            End Get
        End Property
        
        Friend ReadOnly Property Остаточная_дисперсияColumn As DataColumn
            Get
                Return Me.columnОстаточная_дисперсия
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Остаточные_дисперсииRow
            Get
                Return CType(Me.Rows(index),Остаточные_дисперсииRow)
            End Get
        End Property
        
        Public Event Остаточные_дисперсииRowChanged As Остаточные_дисперсииRowChangeEventHandler
        
        Public Event Остаточные_дисперсииRowChanging As Остаточные_дисперсииRowChangeEventHandler
        
        Public Event Остаточные_дисперсииRowDeleted As Остаточные_дисперсииRowChangeEventHandler
        
        Public Event Остаточные_дисперсииRowDeleting As Остаточные_дисперсииRowChangeEventHandler
        
        Public Overloads Sub AddОстаточные_дисперсииRow(ByVal row As Остаточные_дисперсииRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddОстаточные_дисперсииRow(ByVal _Степень_интерполяцион__мн_ As Integer, ByVal Остаточная_дисперсия As Single) As Остаточные_дисперсииRow
            Dim rowОстаточные_дисперсииRow As Остаточные_дисперсииRow = CType(Me.NewRow,Остаточные_дисперсииRow)
            rowОстаточные_дисперсииRow.ItemArray = New Object() {_Степень_интерполяцион__мн_, Остаточная_дисперсия}
            Me.Rows.Add(rowОстаточные_дисперсииRow)
            Return rowОстаточные_дисперсииRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Остаточные_дисперсииDataTable = CType(MyBase.Clone,Остаточные_дисперсииDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Остаточные_дисперсииDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_Степень_интерполяцион__мн_ = Me.Columns("Степень интерполяцион. мн.")
            Me.columnОстаточная_дисперсия = Me.Columns("Остаточная дисперсия")
        End Sub
        
        Private Sub InitClass()
            Me.column_Степень_интерполяцион__мн_ = New DataColumn("Степень интерполяцион. мн.", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.column_Степень_интерполяцион__мн_)
            Me.columnОстаточная_дисперсия = New DataColumn("Остаточная дисперсия", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnОстаточная_дисперсия)
            Me.column_Степень_интерполяцион__мн_.Namespace = ""
            Me.columnОстаточная_дисперсия.Namespace = ""
        End Sub
        
        Public Function NewОстаточные_дисперсииRow() As Остаточные_дисперсииRow
            Return CType(Me.NewRow,Остаточные_дисперсииRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Остаточные_дисперсииRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Остаточные_дисперсииRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Остаточные_дисперсииRowChangedEvent) Is Nothing) Then
                RaiseEvent Остаточные_дисперсииRowChanged(Me, New Остаточные_дисперсииRowChangeEvent(CType(e.Row,Остаточные_дисперсииRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Остаточные_дисперсииRowChangingEvent) Is Nothing) Then
                RaiseEvent Остаточные_дисперсииRowChanging(Me, New Остаточные_дисперсииRowChangeEvent(CType(e.Row,Остаточные_дисперсииRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Остаточные_дисперсииRowDeletedEvent) Is Nothing) Then
                RaiseEvent Остаточные_дисперсииRowDeleted(Me, New Остаточные_дисперсииRowChangeEvent(CType(e.Row,Остаточные_дисперсииRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Остаточные_дисперсииRowDeletingEvent) Is Nothing) Then
                RaiseEvent Остаточные_дисперсииRowDeleting(Me, New Остаточные_дисперсииRowChangeEvent(CType(e.Row,Остаточные_дисперсииRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveОстаточные_дисперсииRow(ByVal row As Остаточные_дисперсииRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Остаточные_дисперсииRow
        Inherits DataRow
        
        Private tableОстаточные_дисперсии As Остаточные_дисперсииDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableОстаточные_дисперсии = CType(Me.Table,Остаточные_дисперсииDataTable)
        End Sub
        
        Public Property _Степень_интерполяцион__мн_ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableОстаточные_дисперсии._Степень_интерполяцион__мн_Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableОстаточные_дисперсии._Степень_интерполяцион__мн_Column) = value
            End Set
        End Property
        
        Public Property Остаточная_дисперсия As Single
            Get
                Try 
                    Return CType(Me(Me.tableОстаточные_дисперсии.Остаточная_дисперсияColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableОстаточные_дисперсии.Остаточная_дисперсияColumn) = value
            End Set
        End Property
        
        Public Function Is_Степень_интерполяцион__мн_Null() As Boolean
            Return Me.IsNull(Me.tableОстаточные_дисперсии._Степень_интерполяцион__мн_Column)
        End Function
        
        Public Sub Set_Степень_интерполяцион__мн_Null()
            Me(Me.tableОстаточные_дисперсии._Степень_интерполяцион__мн_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsОстаточная_дисперсияNull() As Boolean
            Return Me.IsNull(Me.tableОстаточные_дисперсии.Остаточная_дисперсияColumn)
        End Function
        
        Public Sub SetОстаточная_дисперсияNull()
            Me(Me.tableОстаточные_дисперсии.Остаточная_дисперсияColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Остаточные_дисперсииRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Остаточные_дисперсииRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Остаточные_дисперсииRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Остаточные_дисперсииRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
