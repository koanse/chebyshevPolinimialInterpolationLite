'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class XMLSchema1
    Inherits DataSet
    
    Private tableКоординатыТочек As КоординатыТочекDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("КоординатыТочек")) Is Nothing) Then
                Me.Tables.Add(New КоординатыТочекDataTable(ds.Tables("КоординатыТочек")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property КоординатыТочек As КоординатыТочекDataTable
        Get
            Return Me.tableКоординатыТочек
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As XMLSchema1 = CType(MyBase.Clone,XMLSchema1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("КоординатыТочек")) Is Nothing) Then
            Me.Tables.Add(New КоординатыТочекDataTable(ds.Tables("КоординатыТочек")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableКоординатыТочек = CType(Me.Tables("КоординатыТочек"),КоординатыТочекDataTable)
        If (Not (Me.tableКоординатыТочек) Is Nothing) Then
            Me.tableКоординатыТочек.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "XMLSchema1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/XMLSchema1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableКоординатыТочек = New КоординатыТочекDataTable
        Me.Tables.Add(Me.tableКоординатыТочек)
    End Sub
    
    Private Function ShouldSerializeКоординатыТочек() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub КоординатыТочекRowChangeEventHandler(ByVal sender As Object, ByVal e As КоординатыТочекRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КоординатыТочекDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnX As DataColumn
        
        Private columnY As DataColumn
        
        Friend Sub New()
            MyBase.New("КоординатыТочек")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property XColumn As DataColumn
            Get
                Return Me.columnX
            End Get
        End Property
        
        Friend ReadOnly Property YColumn As DataColumn
            Get
                Return Me.columnY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As КоординатыТочекRow
            Get
                Return CType(Me.Rows(index),КоординатыТочекRow)
            End Get
        End Property
        
        Public Event КоординатыТочекRowChanged As КоординатыТочекRowChangeEventHandler
        
        Public Event КоординатыТочекRowChanging As КоординатыТочекRowChangeEventHandler
        
        Public Event КоординатыТочекRowDeleted As КоординатыТочекRowChangeEventHandler
        
        Public Event КоординатыТочекRowDeleting As КоординатыТочекRowChangeEventHandler
        
        Public Overloads Sub AddКоординатыТочекRow(ByVal row As КоординатыТочекRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddКоординатыТочекRow(ByVal X As Single, ByVal Y As Single) As КоординатыТочекRow
            Dim rowКоординатыТочекRow As КоординатыТочекRow = CType(Me.NewRow,КоординатыТочекRow)
            rowКоординатыТочекRow.ItemArray = New Object() {X, Y}
            Me.Rows.Add(rowКоординатыТочекRow)
            Return rowКоординатыТочекRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As КоординатыТочекDataTable = CType(MyBase.Clone,КоординатыТочекDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New КоординатыТочекDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnX = Me.Columns("X")
            Me.columnY = Me.Columns("Y")
        End Sub
        
        Private Sub InitClass()
            Me.columnX = New DataColumn("X", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnX)
            Me.columnY = New DataColumn("Y", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnY)
            Me.columnX.Namespace = ""
            Me.columnY.Namespace = ""
        End Sub
        
        Public Function NewКоординатыТочекRow() As КоординатыТочекRow
            Return CType(Me.NewRow,КоординатыТочекRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New КоординатыТочекRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(КоординатыТочекRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.КоординатыТочекRowChangedEvent) Is Nothing) Then
                RaiseEvent КоординатыТочекRowChanged(Me, New КоординатыТочекRowChangeEvent(CType(e.Row,КоординатыТочекRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.КоординатыТочекRowChangingEvent) Is Nothing) Then
                RaiseEvent КоординатыТочекRowChanging(Me, New КоординатыТочекRowChangeEvent(CType(e.Row,КоординатыТочекRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.КоординатыТочекRowDeletedEvent) Is Nothing) Then
                RaiseEvent КоординатыТочекRowDeleted(Me, New КоординатыТочекRowChangeEvent(CType(e.Row,КоординатыТочекRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.КоординатыТочекRowDeletingEvent) Is Nothing) Then
                RaiseEvent КоординатыТочекRowDeleting(Me, New КоординатыТочекRowChangeEvent(CType(e.Row,КоординатыТочекRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveКоординатыТочекRow(ByVal row As КоординатыТочекRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КоординатыТочекRow
        Inherits DataRow
        
        Private tableКоординатыТочек As КоординатыТочекDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableКоординатыТочек = CType(Me.Table,КоординатыТочекDataTable)
        End Sub
        
        Public Property X As Single
            Get
                Try 
                    Return CType(Me(Me.tableКоординатыТочек.XColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКоординатыТочек.XColumn) = value
            End Set
        End Property
        
        Public Property Y As Single
            Get
                Try 
                    Return CType(Me(Me.tableКоординатыТочек.YColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКоординатыТочек.YColumn) = value
            End Set
        End Property
        
        Public Function IsXNull() As Boolean
            Return Me.IsNull(Me.tableКоординатыТочек.XColumn)
        End Function
        
        Public Sub SetXNull()
            Me(Me.tableКоординатыТочек.XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsYNull() As Boolean
            Return Me.IsNull(Me.tableКоординатыТочек.YColumn)
        End Function
        
        Public Sub SetYNull()
            Me(Me.tableКоординатыТочек.YColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КоординатыТочекRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As КоординатыТочекRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As КоординатыТочекRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As КоординатыТочекRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
